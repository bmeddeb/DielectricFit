# Generated by Django 5.2.5 on 2025-08-09 01:11

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('dielectric', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Analysis',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('kk_metrics', models.JSONField(default=dict)),
                ('features', models.JSONField(default=dict)),
                ('scoring_breakdown', models.JSONField(default=dict)),
                ('autosuggest_top', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Artifact',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('kind', models.CharField(choices=[('npz', 'NumPy .npz'), ('json', 'JSON'), ('parquet', 'Parquet'), ('png', 'PNG'), ('pdf', 'PDF'), ('csv', 'CSV')], max_length=16)),
                ('path', models.TextField()),
                ('sha256', models.CharField(blank=True, default='', max_length=64)),
                ('bytes', models.BigIntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='FittedCurve',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('frequency_hz', models.FloatField()),
                ('epsilon_real_fit', models.FloatField(blank=True, null=True)),
                ('epsilon_imag_fit', models.FloatField(blank=True, null=True)),
                ('dk_fit', models.FloatField(blank=True, null=True)),
                ('tan_delta_fit', models.FloatField(blank=True, null=True)),
                ('residual_real', models.FloatField(blank=True, null=True)),
                ('residual_imag', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FittingSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('algorithm', models.CharField(blank=True, default='', max_length=64)),
                ('max_iter', models.IntegerField(blank=True, null=True)),
                ('tol', models.FloatField(blank=True, null=True)),
                ('loss_function', models.CharField(choices=[('linear', 'Linear'), ('huber', 'Huber'), ('soft_l1', 'Soft L1'), ('cauchy', 'Cauchy'), ('arctan', 'Arctan')], default='linear', max_length=16)),
                ('loss_scale', models.FloatField(default=1.0)),
                ('freq_weighting', models.CharField(blank=True, max_length=32, null=True)),
                ('component_weighting', models.JSONField(blank=True, null=True)),
                ('multistart_group_id', models.UUIDField(blank=True, null=True)),
                ('start_seed', models.IntegerField(blank=True, null=True)),
                ('success', models.BooleanField(blank=True, null=True)),
                ('converged_reason', models.CharField(blank=True, default='', max_length=255)),
                ('runtime_ms', models.IntegerField(blank=True, null=True)),
                ('rmse', models.FloatField(blank=True, null=True)),
                ('chisq_red', models.FloatField(blank=True, null=True)),
                ('aic', models.FloatField(blank=True, null=True)),
                ('bic', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ModelConfig',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default='', max_length=128)),
                ('notes', models.TextField(blank=True, default='')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ModelParameter',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('param_name', models.CharField(max_length=128)),
                ('value', models.FloatField(blank=True, null=True)),
                ('min', models.FloatField(blank=True, null=True)),
                ('max', models.FloatField(blank=True, null=True)),
                ('transform', models.CharField(choices=[('linear', 'Linear'), ('log', 'Log')], default='linear', max_length=8)),
                ('tie_group', models.CharField(blank=True, max_length=64, null=True)),
                ('scale_hint', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ModelType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, unique=True)),
                ('equation_latex', models.TextField(blank=True, default='')),
                ('parameters_schema', models.JSONField(default=list)),
                ('version', models.IntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='PreprocessedDataPoint',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('frequency_hz', models.FloatField()),
                ('epsilon_real', models.FloatField(blank=True, null=True)),
                ('epsilon_imag', models.FloatField(blank=True, null=True)),
                ('dk', models.FloatField(blank=True, null=True)),
                ('tan_delta', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PreprocessingConfig',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('config_json', models.JSONField(default=dict)),
                ('config_hash', models.CharField(max_length=64, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='RawDataPoint',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('point_index', models.IntegerField(blank=True, null=True)),
                ('frequency_hz', models.FloatField()),
                ('dk', models.FloatField(blank=True, null=True)),
                ('df', models.FloatField(blank=True, null=True)),
                ('epsilon_real', models.FloatField(blank=True, null=True)),
                ('epsilon_imag', models.FloatField(blank=True, null=True)),
                ('tan_delta', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Share',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('token', models.CharField(max_length=64, unique=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('can_download', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.RemoveField(
            model_name='profile',
            name='user',
        ),
        migrations.RemoveField(
            model_name='dataset',
            name='data_json',
        ),
        migrations.RemoveField(
            model_name='dataset',
            name='uploaded_file',
        ),
        migrations.AddField(
            model_name='dataset',
            name='description',
            field=models.TextField(blank=True, default=''),
        ),
        migrations.AddField(
            model_name='dataset',
            name='ingest_fingerprint',
            field=models.CharField(blank=True, max_length=64, null=True),
        ),
        migrations.AddField(
            model_name='dataset',
            name='input_freq_unit',
            field=models.CharField(default='GHz', max_length=16),
        ),
        migrations.AddField(
            model_name='dataset',
            name='input_schema',
            field=models.CharField(choices=[('dk_df', 'Dk/Df'), ('eps', 'Epsilon (ε′, ε″)')], default='dk_df', max_length=16),
        ),
        migrations.AddField(
            model_name='dataset',
            name='row_count',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='dataset',
            name='status',
            field=models.CharField(blank=True, default='', max_length=32),
        ),
        migrations.AlterField(
            model_name='dataset',
            name='id',
            field=models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='dataset',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='datasets', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='dataset',
            index=models.Index(fields=['owner', 'created_at'], name='idx_dataset_owner_created'),
        ),
        migrations.CreateModel(
            name='ResidualDiagnostic',
            fields=[
                ('fitting_session', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='diagnostics', serialize=False, to='dielectric.fittingsession')),
                ('dw_stat', models.FloatField(blank=True, null=True)),
                ('runs_p', models.FloatField(blank=True, null=True)),
                ('qq_normal_p', models.FloatField(blank=True, null=True)),
                ('autocorr_lag1', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.AddField(
            model_name='fittedcurve',
            name='fitting_session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='curves', to='dielectric.fittingsession'),
        ),
        migrations.AddField(
            model_name='artifact',
            name='fitting_session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='artifacts', to='dielectric.fittingsession'),
        ),
        migrations.AddField(
            model_name='modelconfig',
            name='analysis',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='model_configs', to='dielectric.analysis'),
        ),
        migrations.AddField(
            model_name='fittingsession',
            name='model_config',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fittings', to='dielectric.modelconfig'),
        ),
        migrations.AddField(
            model_name='modelparameter',
            name='model_config',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parameters', to='dielectric.modelconfig'),
        ),
        migrations.AddField(
            model_name='modelconfig',
            name='model_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='configs', to='dielectric.modeltype'),
        ),
        migrations.AddField(
            model_name='preprocessingconfig',
            name='dataset',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='preprocessing_configs', to='dielectric.dataset'),
        ),
        migrations.AddField(
            model_name='preprocesseddatapoint',
            name='preprocessing_config',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='points', to='dielectric.preprocessingconfig'),
        ),
        migrations.AddField(
            model_name='fittingsession',
            name='preprocessing_config',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fittings', to='dielectric.preprocessingconfig'),
        ),
        migrations.AddField(
            model_name='analysis',
            name='preprocessing_config',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analyses', to='dielectric.preprocessingconfig'),
        ),
        migrations.AddField(
            model_name='rawdatapoint',
            name='dataset',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='raw_points', to='dielectric.dataset'),
        ),
        migrations.AddField(
            model_name='share',
            name='analysis',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='shares', to='dielectric.analysis'),
        ),
        migrations.AddField(
            model_name='share',
            name='fitting_session',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='shares', to='dielectric.fittingsession'),
        ),
        migrations.DeleteModel(
            name='Profile',
        ),
        migrations.AddIndex(
            model_name='fittedcurve',
            index=models.Index(fields=['fitting_session', 'frequency_hz'], name='idx_curve_fit_freq'),
        ),
        migrations.AddIndex(
            model_name='modelparameter',
            index=models.Index(fields=['model_config', 'param_name'], name='idx_param_config_name'),
        ),
        migrations.AddIndex(
            model_name='preprocesseddatapoint',
            index=models.Index(fields=['preprocessing_config', 'frequency_hz'], name='idx_preproc_freq'),
        ),
        migrations.AddIndex(
            model_name='fittingsession',
            index=models.Index(fields=['multistart_group_id', 'aic'], name='idx_fit_group_aic'),
        ),
        migrations.AddIndex(
            model_name='rawdatapoint',
            index=models.Index(fields=['dataset', 'frequency_hz'], name='idx_raw_dataset_freq'),
        ),
        migrations.AddConstraint(
            model_name='rawdatapoint',
            constraint=models.UniqueConstraint(fields=('dataset', 'frequency_hz'), name='uq_raw_dataset_freq'),
        ),
    ]
